[
  {
    "id": 1,
    "question": "Citez au moins 3 raisons distinctes pour lesquelles un composant React pourrait être re-rendu.",
    "correctAnswer": "1. Changement de props : Lorsque les props d'un composant React sont modifiées, React déclenche un re-rendu pour mettre à jour l'interface utilisateur en conséquence. Cela permet de s'assurer que l'état de l'application est synchronisé avec les données passées en props.\n2. Changement d'état : Lorsqu'un composant React change son état interne, React déclenche également un re-rendu pour mettre à jour l'interface utilisateur en conséquence. Cela permet de s'assurer que l'état de l'application est correctement affiché à l'utilisateur.\n3. Changement de contexte : Lorsque le contexte d'un composant React change, React peut déclencher un re-rendu pour mettre à jour l'interface utilisateur en conséquence. Cela peut se produire lorsque le contexte est modifié par un composant parent ou par une bibliothèque tierce."
  },
  {
    "id": 2,
    "question": "Quels sont les concepts clés en React ? Pouvez-vous en nommer au moins 5 ?",
    "correctAnswer": "1. Composants : contiennent la logique et l’UI, et permettent un découpage en unités réutilisables et modulaires.\n2. État : données internes d’un composant, gérées avec des hooks comme useState, useRef ou useReducer.\n3. Props : données transmises par le composant parent de manière unidirectionnelle vers l’enfant, comme les paramètres d’une fonction.\n4. Hooks : fonctions spéciales pour gérer l’état local, les effets secondaires et d’autres comportements liés au cycle de vie du composant.\n5. Syntaxe déclarative JSX : décrire à quoi l’UI devrait ressembler plutôt que comment manipuler le DOM directement.\n6. Cycle de vie des composants : série de méthodes ou d'étapes par lesquelles un composant passe lors de son rendu et de sa mise à jour (plus utilisé avec les composants basés sur des classes, mais des hooks comme useEffect peuvent gérer ces étapes).\n7. Composants : éléments de base représentant une partie de l’interface utilisateur.\n8. Déclaratif : on décrit à quoi l’interface utilisateur doit ressembler, en se concentrant sur le résultat souhaité (le \"quoi\" plutôt que le \"comment\").\n9. On fait cela à l’aide d’une syntaxe déclarative appelée JSX : un mélange de HTML, JavaScript et CSS, ainsi que des références vers d’autres composants JSX.\n10. Abstraction : on n'interagit pas directement avec le DOM.\n11. Piloté par l’état : React va rendre/afficher l’UI en se basant sur l’état initial d’un composant. Puis, React va \"réagir\" à chaque changement d’état en mettant à jour l’UI grâce à un re-render. C’est de là que vient le nom “React”."
  }
]
